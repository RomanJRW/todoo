CREATE TABLE task_list_task_map
(
    task_id INTEGER NOT NULL,
    task_list_id INTEGER NOT NULL,
    CONSTRAINT task_list_task_mapping_task_id_task_list_id_pk PRIMARY KEY (task_id, task_list_id),
    CONSTRAINT task_list_task_map_tasks_id_fk FOREIGN KEY (task_id) REFERENCES tasks (id) ON DELETE CASCADE,
    CONSTRAINT task_list_task_map_task_lists_id_fk FOREIGN KEY (task_list_id) REFERENCES task_lists (id) ON DELETE CASCADE
);
CREATE TABLE task_lists
(
    id INTEGER DEFAULT nextval('task_lists_id_seq'::regclass) PRIMARY KEY NOT NULL,
    name VARCHAR(100) NOT NULL
);
CREATE UNIQUE INDEX task_lists_id_uindex ON task_lists (id);
CREATE TABLE tasks
(
    id INTEGER DEFAULT nextval('tasks_id_seq'::regclass) PRIMARY KEY NOT NULL,
    description VARCHAR(500) NOT NULL,
    completed BOOLEAN NOT NULL
);
CREATE UNIQUE INDEX tasks_id_uindex ON tasks (id);
CREATE TABLE user_credentials
(
    id INTEGER DEFAULT nextval('user_details_id_seq'::regclass) PRIMARY KEY NOT NULL,
    username VARCHAR(250) NOT NULL,
    password VARCHAR(100) NOT NULL
);
CREATE UNIQUE INDEX user_credentials_user_id_uindex ON user_credentials (id);
CREATE UNIQUE INDEX user_credentials_username_uindex ON user_credentials (username);
CREATE TABLE user_details
(
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    user_id INTEGER PRIMARY KEY NOT NULL,
    CONSTRAINT user_details_user_credentials_id_fk FOREIGN KEY (user_id) REFERENCES user_credentials (id)
);
CREATE UNIQUE INDEX user_details_user_id_uindex ON user_details (user_id);
CREATE TABLE user_task_list_map
(
    user_id INTEGER NOT NULL,
    task_list_id INTEGER NOT NULL,
    is_owner BOOLEAN NOT NULL,
    CONSTRAINT user_task_list_map_user_id_task_list_id_pk PRIMARY KEY (user_id, task_list_id),
    CONSTRAINT user_task_list_map_task_lists_id_fk FOREIGN KEY (task_list_id) REFERENCES task_lists (id) ON DELETE CASCADE
);